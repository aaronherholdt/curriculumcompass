import express from "express";
import { spawn } from "child_process";
import path from "path";
import { v4 as uuidv4 } from "uuid";
import fs from "fs";

const router = express.Router();

router.post("/curriculum-search", async (req, res) => {
  try {
    const { profileId, keywords } = req.body;
    
    if (!keywords || !Array.isArray(keywords) || keywords.length === 0) {
      return res.status(400).json({ error: "Keywords are required and must be an array" });
    }
    
    const searchId = uuidv4();
    
    // Spawn the Python script process
    const pythonProcess = spawn("python", [
      path.join(process.cwd(), "backend/scraper/main.py"),
      searchId,
      ...keywords
    ]);
    
    let dataString = "";
    
    // Collect data from script's standard output
    pythonProcess.stdout.on("data", (data) => {
      dataString += data.toString();
    });
    
    // Handle errors
    pythonProcess.stderr.on("data", (data) => {
      console.error(`Python Script Error: ${data}`);
    });
    
    // Process completed
    pythonProcess.on("close", (code) => {
      try {
        if (code !== 0) {
          return res.status(500).json({ error: "Scraper process failed" });
        }
        
        // Read the result file generated by the Python script
        const resultPath = path.join(process.cwd(), "data/searches", `${searchId}.json`);
        
        // Check if file exists
        if (!fs.existsSync(resultPath)) {
          return res.status(500).json({ error: "Result file not found" });
        }
        
        // Read and parse the result file
        const resultData = JSON.parse(fs.readFileSync(resultPath, "utf8"));
        
        // Extract resources from the result - now they're already in the correct format
        const resources = resultData.results || [];
        
        // Return the resources
        res.json({
          success: true,
          resources: resources,
          searchId,
          profileId
        });
      } catch (error) {
        console.error("Error processing scraper results:", error);
        res.status(500).json({ error: "Failed to process search results" });
      }
    });
  } catch (error) {
    console.error("Search API error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Helper function to estimate time based on resource type
function getEstimatedTime(type) {
  switch (type?.toLowerCase()) {
    case "video":
      return "10-15 minutes";
    case "worksheet":
      return "20-30 minutes";
    case "lesson":
      return "30-45 minutes";
    case "activity":
      return "25-40 minutes";
    case "interactive":
      return "15-25 minutes";
    case "reading resource":
    case "writing resource":
      return "20-35 minutes";
    default:
      return "15-30 minutes";
  }
}

export default router; 